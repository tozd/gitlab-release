# We prefer this order semantically, but in fact we
# run test and build jobs simultaneously.
stages:
  - test
  - build
  - deploy
  - sync

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_PIPELINE_IMAGE_NAME: "$CI_REGISTRY_IMAGE/pipeline:$CI_PIPELINE_ID"
  DOCKER_DRIVER: overlay2
  DOCKER_BUILDKIT: "1"
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic"

test:
  stage: test

  image: golang:1.17-alpine3.14

  before_script:
    - apk --update add make gcc musl-dev
    - (cd /go; go install gotest.tools/gotestsum@v1.7.0)
    - (cd /go; go install github.com/boumenot/gocover-cobertura@v1.2.0)

  script:
    # Tests also use GITLAB_API_TOKEN environment variable to run end-to-end tests.
    - make test-ci

  artifacts:
    when: always
    reports:
      junit: tests.xml
      cobertura: coverage.xml
    paths:
      - coverage.html
    expire_in: never

  # This has to be set in project's settings (CI/CD -> General pipelines section) as well.
  coverage: '/coverage: \d+\.\d+% of statements/'

lint:
  stage: test

  image: golang:1.17-alpine3.14

  before_script:
    - apk --update add make gcc musl-dev
    - wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.43.0

  script:
    - make lint-ci

  artifacts:
    when: always
    reports:
      codequality: codeclimate.json
    expire_in: never

fmt:
  stage: test

  image: golang:1.17-alpine3.14

  before_script:
    - apk --update add make git gcc musl-dev
    - go install mvdan.cc/gofumpt@v0.2.0
    - go install golang.org/x/tools/cmd/goimports@v0.1.7

  script:
    - make fmt-ci

docs:
  stage: test

  image: node:17-alpine3.14

  before_script:
    - npm install -g 'markdownlint-cli@~0.30.0'

  script:
    - "npx --no markdownlint -- --ignore-path .gitignore --ignore testdata/ '**/*.md'"

docker:
  stage: build

  image: docker:20-git

  services:
    - docker:20-dind

  before_script:
    - docker info
    - echo "$CI_JOB_TOKEN" | docker login --username gitlab-ci-token --password-stdin "$CI_REGISTRY"

  script:
    - export BUILD_TIMESTAMP="$(date -u +%FT%TZ)"
    - echo BUILD_TIMESTAMP "$BUILD_TIMESTAMP"
    - export VERSION="$(git describe --tags --always --dirty=+)"
    - echo VERSION "$VERSION"
    - docker build
        --target production
        --tag "$DOCKER_PIPELINE_IMAGE_NAME"
        --tag "$CI_REGISTRY_IMAGE/commit:$CI_COMMIT_SHA"
        --build-arg BUILD_TIMESTAMP
        --label "org.opencontainers.image.version=$VERSION"
        --label "org.opencontainers.image.created=$BUILD_TIMESTAMP"
        --label "org.opencontainers.image.revision=$CI_COMMIT_SHA"
        --label "org.opencontainers.image.url=$CI_PROJECT_URL" .
    - docker build
        --target debug
        --tag "$DOCKER_PIPELINE_IMAGE_NAME-debug"
        --tag "$CI_REGISTRY_IMAGE/commit:$CI_COMMIT_SHA-debug"
        --build-arg BUILD_TIMESTAMP
        --label "org.opencontainers.image.version=$VERSION"
        --label "org.opencontainers.image.created=$BUILD_TIMESTAMP"
        --label "org.opencontainers.image.revision=$CI_COMMIT_SHA"
        --label "org.opencontainers.image.url=$CI_PROJECT_URL" .
    - docker push "$DOCKER_PIPELINE_IMAGE_NAME"
    - docker push "$CI_REGISTRY_IMAGE/commit:$CI_COMMIT_SHA"
    - docker push "$DOCKER_PIPELINE_IMAGE_NAME-debug"
    - docker push "$CI_REGISTRY_IMAGE/commit:$CI_COMMIT_SHA-debug"
    - export IMAGE_ID=$(docker create "$DOCKER_PIPELINE_IMAGE_NAME")
    - docker cp "$IMAGE_ID:/gitlab-release" gitlab-release-linux-amd64
    - docker rm "$IMAGE_ID"

  artifacts:
    expose_as: binaries
    name: binaries
    paths:
      - gitlab-release-linux-amd64
    expire_in: never

  # We want to run it as soon as possible and do not wait for test stage to finish.
  needs: []

push_branch:
  stage: deploy

  image: docker:20

  services:
    - docker:20-dind

  before_script:
    - docker info
    - echo "$CI_JOB_TOKEN" | docker login --username gitlab-ci-token --password-stdin "$CI_REGISTRY"

  # TODO: Improve so that pulling is not necessary. See: https://gitlab.com/gitlab-org/gitlab/-/issues/15252
  script:
    - docker pull "$DOCKER_PIPELINE_IMAGE_NAME"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME" "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:latest"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME" "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA"
    - docker pull "$DOCKER_PIPELINE_IMAGE_NAME-debug"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME-debug" "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:latest-debug"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME-debug" "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA-debug"
    - docker push "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:latest"
    - docker push "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA"
    - docker push "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:latest-debug"
    - docker push "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA-debug"

  rules:
    - if: $CI_COMMIT_BRANCH

  # We do not need build artifacts in this job.
  dependencies: []

push_tag:
  stage: deploy

  image: docker:20

  services:
    - docker:20-dind

  before_script:
    - docker info
    - echo "$CI_JOB_TOKEN" | docker login --username gitlab-ci-token --password-stdin "$CI_REGISTRY"

  # TODO: Improve so that pulling is not necessary. See: https://gitlab.com/gitlab-org/gitlab/-/issues/15252
  script:
    - docker pull "$DOCKER_PIPELINE_IMAGE_NAME"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME" "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:latest"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME" "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA"
    - docker pull "$DOCKER_PIPELINE_IMAGE_NAME-debug"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME-debug" "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:latest-debug"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME-debug" "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA-debug"
    - docker push "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:latest"
    - docker push "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA"
    - docker push "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:latest-debug"
    - docker push "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA-debug"

  rules:
    # Only on protected tags. Protected tags start with "v".
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME =~ /^v/'

  # We do not need build artifacts in this job.
  dependencies: []

upload_binaries:
  stage: deploy

  image: curlimages/curl:7.80.0

  script:
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file gitlab-release-linux-amd64 "$PACKAGE_REGISTRY_URL/linux-amd64/${CI_COMMIT_REF_NAME#v}/gitlab-release"'

  rules:
    # Only on protected tags. Protected tags start with "v".
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME =~ /^v/'

  dependencies:
    - docker

publish:
  stage: deploy

  image: golang:1.17-alpine3.14

  script:
    - GOPROXY=proxy.golang.org go list -m "gitlab.com/tozd/gitlab/release@$CI_COMMIT_REF_NAME"

  rules:
    # Only on protected tags on main repository. Protected tags start with "v".
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME =~ /^v/ && $CI_PROJECT_PATH == "tozd/gitlab/release"'

  # We do not need build artifacts in this job.
  dependencies: []

sync_releases:
  stage: sync

  # TODO: Do not use debug image.
  #       See: https://gitlab.com/gitlab-org/gitlab-runner/-/issues/26501
  image:
    name: $DOCKER_PIPELINE_IMAGE_NAME-debug
    entrypoint: [""]

  script:
    - /gitlab-release

  rules:
    - if: '$GITLAB_API_TOKEN && $CI_COMMIT_BRANCH == "main"'

  # We do not need build artifacts in this job.
  dependencies: []
